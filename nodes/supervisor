#!/usr/bin/env python
# -*- coding: UTF-8 -*-


from itertools import imap
from flup.server.fcgi import WSGIServer
import urlparse
from jinja2 import Environment, PackageLoader

import os
import rospy
from std_msgs.msg import Empty
import rosnode

from rospkg import RosPack

import threading 
import time

import json


rospy.init_node('freeplay_sandbox_supervisor')

from freeplay_sandbox_supervisor.launcher import Launcher

package = "freeplay_sandbox"

rp = RosPack()


launchers = []

for root, dirs, files in os.walk(rp.get_path(package)):
    for file in files:
        if file.endswith(".launch"):
             launchers.append(Launcher(package, os.path.join(root, file)))


env = Environment(loader=PackageLoader('freeplay_sandbox_supervisor', 'tpl'))
supervisor_tpl = env.get_template('supervisor.tpl')
launcher_tpl = env.get_template('launcher.tpl')

def fixencoding(s):
    return s.encode("utf-8")

def getlauncher(name):
    launcher = None
    for l in launchers:
        if l.name == name:
            launcher = l
            break
    return launcher

def process_launch(options):
    launchfile = options["launch"][0]

    launcher = getlauncher(launchfile)
    if launcher is None:
        rospy.logwarn("Attempting to launch inexistant %s" % launchfile)
        return False

    if "start" in options["action"]:
        launcher.start()
    elif "stop" in options["action"]:
        launcher.shutdown()

    return "true" if launcher.isrunning() else "false"

def status(path, options):

    if "action" in options:
        if "start" in options["action"]:
            return process_launch(options)
        elif "stop" in options["action"]:
            return process_launch(options)
        elif "setarg" in options["action"]:
            launcher = getlauncher(options["launch"][0])
            launcher.setarg(options["arg"][0],
                            options.get("value", [None])[0])
            return launcher_tpl.generate(launcher=launcher, showargs=True)
        elif "updatestate" in options["action"]:
            return json.dumps({l.name: l.isrunning() for l in launchers})



    pingable, unpingable = rosnode.rosnode_ping_all()
    return supervisor_tpl.generate(page="status",
                                   path=path,
                                   launchers=launchers,
                                   nodes_ok=pingable, 
                                   nodes_ko=unpingable)

def manage(path, options):

    if "action" in options:
        if "itemstostash" in options["action"]:
            rospy.loginfo("Sending items back to stash")
            rospy.Publisher('signal_sandtray_items_to_stash', Empty, queue_size=1).publish(Empty())
        if "reshuffleitems" in options["action"]:
            rospy.loginfo("Reshuffling items")
            rospy.Publisher('signal_sandtray_shuffle_items', Empty, queue_size=1).publish(Empty())
        if "clearbackground" in options["action"]:
            rospy.loginfo("Clearing background")
            rospy.Publisher('signal_sandtray_clear_drawing', Empty, queue_size=1).publish(Empty())
        if "localisation" in options["action"]:
            rospy.loginfo("Triggering robot localisation")
            rospy.Publisher('signal_sandtray_robot_localising', Empty, queue_size=1).publish(Empty())

    return supervisor_tpl.generate(page="manage",
                                   path=path)

def record(path, options):

    rospy.loginfo("%s" % str(options))
    if "action" in options:
        if "createrecord" in options["action"]:
            return "123456" 

        if "reshuffleitems" in options["action"]:
            rospy.loginfo("Reshuffling items")
            rospy.Publisher('signal_sandtray_shuffle_items', Empty, queue_size=1).publish(Empty())
        if "clearbackground" in options["action"]:
            rospy.loginfo("Clearing background")
            rospy.Publisher('signal_sandtray_clear_drawing', Empty, queue_size=1).publish(Empty())

    return supervisor_tpl.generate(page="records",
                                   path=path,
                                   records=[])

def app(environ, start_response):

    start_response('200 OK', [('Content-Type', 'text/html')])

    path = environ["PATH_INFO"].decode("utf-8")

    options = urlparse.parse_qs(environ["QUERY_STRING"])
    rospy.logdebug("Incoming request. Path: %s; options passed:\n%s" % (path, str(options)))

    if path.endswith("manage"):
        return imap(fixencoding, manage(path,options))
    elif path.endswith("status"):
        return imap(fixencoding, status(path,options))
    else: # root path: /
        return imap(fixencoding, record(path,options))

if __name__ == '__main__': 

    IP="127.0.0.1"
    PORT=8080

    rospy.loginfo("Starting the CGI server on %s:%d (you still need a webserver, though!)" % (IP, PORT))

    WSGIServer(app, bindAddress = (IP, PORT)).run()

    for launcher in launchers:
        launcher.shutdown()

    rospy.loginfo("Bye bye.")

