#!/usr/bin/env python
# -*- coding: UTF-8 -*-


from itertools import imap
from flup.server.fcgi import WSGIServer
import urlparse
from jinja2 import Environment, PackageLoader

import threading
import os
import traceback
import rospy
from std_msgs.msg import Empty
from std_msgs.msg import Char
from std_msgs.msg import String
import rosnode

from rospkg import RosPack

import datetime
import time

import json

import subprocess

import random

rospy.init_node('freeplay_sandbox_supervisor')

blankscreen_publisher = rospy.Publisher('sandtray/signals/blank_interface', Empty, queue_size=1)
visual_tracking_publisher = rospy.Publisher('sandtray/signals/start_visual_tracking', Empty, queue_size=1)
prod_quiz_publisher = rospy.Publisher('sandtray/signals/start_prod_quiz', Empty, queue_size=1)
items_placement_publisher = rospy.Publisher('sandtray/signals/start_items_placement', Empty, queue_size=1)
tutorial_publisher = rospy.Publisher('sandtray/signals/start_tutorial', Empty, queue_size=1)
freeplay_publisher = rospy.Publisher('sandtray/signals/start_freeplay', Empty, queue_size=1)
screenshot_pub = rospy.Publisher('sandtray/screenshot', String, queue_size=1)
sandtraysignallocalising_pub = rospy.Publisher('sandtray/signals/robot_localising', Empty, queue_size=1)
sandtraysignalcleardrawing_pub = rospy.Publisher('sandtray/signals/clear_drawing', Empty, queue_size=1)
sandtraysignalshuffleitems_pub = rospy.Publisher('sandtray/signals/shuffle_items', Empty, queue_size=1)
sandtraysignalitemstostash_pub = rospy.Publisher('sandtray/signals/items_to_stash', Empty, queue_size=1)

prod_quiz_num_pub = rospy.Publisher('sandtray/quiz/question', String, queue_size=1)
pub_quiz_uscore = rospy.Publisher('sandtray/quiz/userScore', String, queue_size=1)
pub_quiz_ascore = rospy.Publisher('sandtray/quiz/agentScore', String, queue_size=1)
pub_quiz_result = rospy.Publisher('sandtray/quiz/result', String, queue_size=1)

#pub_backchannel = rospy.Publisher("nao/backchannel/standard", String, queue_size=1)
pub_quiz_answer = rospy.Publisher('nao/prod_quiz/answer', String, queue_size=1)
pub_quiz_feedback = rospy.Publisher('nao/prod_quiz/feedback', String, queue_size=1)
pub_quiz_encourage = rospy.Publisher('nao/prod_quiz/encourage', Empty, queue_size=1)
pub_quiz_start = rospy.Publisher('nao/prod_quiz/start', Empty, queue_size=1)
pub_quiz_message = rospy.Publisher('nao/prod_quiz/message', String, queue_size=1)

pub_placement_start = rospy.Publisher('nao/placement/start', Empty, queue_size=1)

pub_quiz_childname = rospy.Publisher('nao/prod_quiz/childname', String, queue_size=1)
pub_quiz_agentname = rospy.Publisher('sandtray/quiz/agentname', String, queue_size=1)

from freeplay_sandbox_supervisor.launcher import Launcher
from freeplay_sandbox_supervisor.experiment import Experiment, CHILDCHILD, CHILDROBOT

package = "freeplay_sandbox"

rp = RosPack()


launchers = []
records = {}

nb_question = 1
nb_question_max = 10

nb_purple_faces = 1
nb_yellow_faces = 1
cv_visual_tracking_ended = threading.Condition()

for root, dirs, files in os.walk(rp.get_path(package)):
    for file in files:
        if file.endswith(".launch"):
            rospy.loginfo("Loading launchfile %s" % file)
            launchers.append(Launcher(package, os.path.join(root, file)))


env = Environment(loader=PackageLoader('freeplay_sandbox_supervisor', 'tpl'))
supervisor_tpl = env.get_template('supervisor.tpl')
launcher_tpl = env.get_template('launcher.tpl')

def onpurplefacedetected(msg):
    global nb_purple_faces
    nb_purple_faces = msg.data

def onyellowfacedetected(msg):
    global nb_yellow_faces
    nb_yellow_faces = msg.data

def onvisualtrackingended(msg):
    global visual_tracking_ended

    cv_visual_tracking_ended.acquire()
    cv_visual_tracking_ended.notify()
    cv_visual_tracking_ended.release()

def fixencoding(s):
    return s.encode("utf-8")

def getfreespace(path="/"):
    df = subprocess.Popen(["df", "-h", path], stdout=subprocess.PIPE)
    output = df.communicate()[0]
    device, size, used, available, percent, mountpoint = output.split("\n")[1].split()
    return "available space on hard-drive: %s/%s (%s%%)" % (available, size, 100-int(percent[:-1]))

def getlauncher(name):
    launcher = None
    for l in launchers:
        if l.name == name:
            launcher = l
            break
    return launcher

def changequestion(msg):
    global nb_question
    if msg == "clear":
        nb_question = 0
    if msg == "start":
        nb_question = 1
    if msg == "forward":
        if (nb_question + 1) < nb_question_max:
            nb_question = nb_question + 1
        else:
            nb_question = nb_question_max
    if msg == "backward":
        if (nb_question - 1) > 0:
            nb_question = nb_question - 1
        else:
            nb_question = 1


    question = "quiz" + str(nb_question) + ".svg"
    return question




def process_launch(options):
    launchfile = options["launch"][0]

    launcher = getlauncher(launchfile)
    if launcher is None:
        rospy.logwarn("Attempting to launch inexistant %s" % launchfile)
        return False

    ##### WORKAROUND FOR NAOQI MESSING UP WITH THE ENVIRONMENT
    # in general, we does not want the naoqi SDK to appear in the
    # LD_LIBRARY_PATH as it contains old libraries. But when launching
    # the robot, this needs to be added
    env = dict(os.environ)
    if(launcher.name == "play"):
        env['LD_LIBRARY_PATH'] = env['LD_LIBRARY_PATH'] + ":" + env['HOME'] + "/nao/naoqi-sdk-2.1.4.13-linux64/lib"
    ######

    if "start" in options["action"]:
        launcher.start(env=env)
    elif "stop" in options["action"]:
        launcher.shutdown()

    return "true" if launcher.isrunning() else "false"

def process(path, options):

    try:
        expe = None
        if "recordid" in options:
            try:
                expe = records[options["recordid"][0]]
            except KeyError as ke:
                rospy.logwarn("No experiment with recordid %s" % options["recordid"][0])

        if "action" in options:
            ############################################
            # status
            ############################################
            if "start" in options["action"]:
                return process_launch(options)

            elif "stop" in options["action"]:
                return process_launch(options)

            elif "setarg" in options["action"]:
                launcher = getlauncher(options["launch"][0])
                launcher.setarg(options["arg"][0],
                                options.get("value", [None])[0])
                return launcher_tpl.generate(launcher=launcher, showargs=True)

            elif "updatestate" in options["action"]:
                return json.dumps({l.name: l.isrunning() for l in launchers})

            ############################################
            # manage
            ############################################
            elif "itemstostash" in options["action"]:
                rospy.loginfo("Sending items back to stash")
                sandtraysignalitemstostash_pub.publish(Empty())
                return "true"

            elif "reshuffleitems" in options["action"]:
                rospy.loginfo("Reshuffling items")
                sandtraysignalshuffleitems_pub.publish(Empty())
                return "true"

            elif "clearbackground" in options["action"]:
                rospy.loginfo("Clearing background")
                sandtraysignalcleardrawing_pub.publish(Empty())
                return "true"

            elif "localisation" in options["action"]:
                rospy.loginfo("Triggering robot localisation")
                sandtraysignallocalising_pub.publish(Empty())
                return "true"

            elif "screenshot" in options["action"]:

                now = datetime.datetime.now()
                filename = "%4d-%02d-%02d-%02d:%02d:%02d.png" % (now.year, now.month, now.day, now.hour, now.minute, now.second)

                if 'prefix' in options:
                    filename = options['prefix'][0] + "-" + filename

                if expe:
                    path = os.path.join(expe.path, filename)
                else:
                    import tempfile
                    path = os.path.join(tempfile.gettempdir(), filename)

                rospy.loginfo("Taking a screenshot -- saved to %s" % path)
                screenshot_pub.publish(String(path))
                return "true"

            elif "blank" in options["action"]:
                rospy.loginfo("Blanking user interface")
                blankscreen_publisher.publish(Empty())
                return "true"

            elif "tutorial" in options["action"]:
                rospy.loginfo("Switching to tutorial mode")
                tutorial_publisher.publish(Empty())
                return "true"

            elif "items-placement" in options["action"]:
                rospy.loginfo("Swtiching to items placement task")
                items_placement_publisher.publish(Empty())
                return 'true'

            elif "freeplay" in options["action"]:
                rospy.loginfo("Switching to freeplay mode")
                freeplay_publisher.publish(Empty())
                return "true"

            elif "prod_quiz" in options["action"]:
                rospy.loginfo("Switching to Production Quiz mode")
                prod_quiz_publisher.publish(Empty())
                pub_quiz_start.publish(Empty())
                return "true"

            elif "visualtracking" in options["action"]:
                rospy.loginfo("Switching to visual tracking mode")
                visual_tracking_publisher.publish(Empty())
                return "true"

            ############################################
            # records
            ############################################
            elif "start_sandbox" in options["action"]:
                launcher = getlauncher("interactive_playground")
                launcher.start()
                return "true"

            elif "start_cameras" in options["action"]:
                launcher = getlauncher("dual_sr300")
                launcher.start()
                return "true"

            elif "start_attention_tracking" in options["action"]:
                launcher = getlauncher("dual_attention_tracking")
                launcher.start()
                return "true"

            elif "initiate_experiment" in options["action"]:

                # first, stop all ROS nodes, so that we properly restart them with
                # logging configured for storage within the next experiment folder.
                for launcher in launchers:
                    launcher.shutdown()

                rospy.loginfo("Creating new experiment")
                expe = Experiment(options["cdt"][0])
                records[repr(expe)] = expe
                rospy.loginfo("Experiment %s created" % expe)
                return json.dumps([repr(expe), expe.purple.id, expe.yellow.id])

            elif "savedemographics" in options["action"]:
                rospy.loginfo("Saving demographics")
                expe.save_demographics(options)
                return json.dumps(True)

            elif "getdetectedfaces" in options["action"]:
                return json.dumps({"yellow": nb_yellow_faces, "purple": nb_purple_faces})


            elif "start_visual_tracking" in options["action"]:
                rospy.loginfo("Starting the visual tracking task")

                launcher = getlauncher("record_visual_tracking")
                launcher.setarg("output_file", os.path.join(expe.path, "visual_tracking.bag"))
                launcher.setarg("duration", "45") # seconds
                launcher.start()

                visual_tracking_publisher.publish(Empty())

                cv_visual_tracking_ended.acquire()
                cv_visual_tracking_ended.wait()
                cv_visual_tracking_ended.release()


                launcher.shutdown()

                launcher = getlauncher("dual_sr300")
                launcher.shutdown()

                rospy.loginfo("Visual tracking task finished")
                return 'true'

            elif "start_items_placement" in options["action"]:
                rospy.loginfo("Starting the items placement task")

                launcher = getlauncher("dual_sr300")
                launcher.shutdown()

                #if(expe.condition == CHILDROBOT):
                rospy.loginfo("Starting the robot first in Wizard-of-Oz mode")
                robot_launcher = getlauncher("woz")
                robotip = options['robot-ip'][0];
                rospy.loginfo("Setting the robot IP address to %s" % robotip)
                robot_launcher.setarg("nao_ip", robotip)
                robot_launcher.setarg("with_robot", True)
                robot_launcher.setarg("arm_reach", 0.5)

                ##### WORKAROUND FOR NAOQI MESSING UP WITH THE ENVIRONMENT
                # in general, we does not want the naoqi SDK to appear in the
                # LD_LIBRARY_PATH as it contains old libraries. But when launching
                # the robot, this needs to be added
                env = dict(os.environ)
                env['LD_LIBRARY_PATH'] = env['LD_LIBRARY_PATH'] + ":" + env['HOME'] + "/nao/naoqi-sdk-2.1.4.13-linux64/lib"
                ######

                robot_launcher.start(env=env)

                prepare_launcher = getlauncher("prepare_recording")
                prepare_launcher.start()

                launcher = getlauncher("record_items_placement")
                launcher.setarg("output_file", os.path.join(expe.path, "items_placement.bag"))
                launcher.setarg("duration", "15m")
                launcher.start()

                items_placement_publisher.publish(Empty())
                return 'true'

            elif "stop_items_placement" in options["action"]:
                rospy.loginfo("Stopping items placement")

                robot_launcher = getlauncher("woz")
                robot_launcher.shutdown()

                record_launcher = getlauncher("record_items_placement")
                record_launcher.shutdown()

                prepare_launcher = getlauncher("prepare_recording")
                prepare_launcher.shutdown()

                return 'true'

            elif "item_placement_explain" in options["action"]:
                rospy.loginfo("Give explanation for the item placement")
                pub_placement_start.publish(Empty())
                return 'true'

            elif "start_freeplay" in options["action"]:
                rospy.loginfo("Starting freeplay task")

                # if the cameras are still running (eg, visual tracking as been skipped), stop them now
                launcher = getlauncher("dual_sr300")
                launcher.shutdown()

                prepare_launcher = getlauncher("prepare_recording")
                prepare_launcher.shutdown()
                #######################################################

                freeplay_publisher.publish(Empty())

                if(expe.condition == CHILDROBOT):
                    rospy.loginfo("Starting the robot first")
                    robot_launcher = getlauncher("play")
                    robotip = options['robot-ip'][0];
                    rospy.loginfo("Setting the robot IP address to %s" % robotip)
                    robot_launcher.setarg("nao_ip", robotip)
                    robot_launcher.setarg("with_robot", True)
                    robot_launcher.setarg("arm_reach", 0.5)

                    ##### WORKAROUND FOR NAOQI MESSING UP WITH THE ENVIRONMENT
                    # in general, we does not want the naoqi SDK to appear in the
                    # LD_LIBRARY_PATH as it contains old libraries. But when launching
                    # the robot, this needs to be added
                    env = dict(os.environ)
                    env['LD_LIBRARY_PATH'] = env['LD_LIBRARY_PATH'] + ":" + env['HOME'] + "/nao/naoqi-sdk-2.1.4.13-linux64/lib"
                    ######

                    robot_launcher.start(env=env)

                prepare_launcher = getlauncher("prepare_recording")
                prepare_launcher.start()
                record_launcher = getlauncher("record")
                record_launcher.setarg("output_file", os.path.join(expe.path, "freeplay.bag"))
                record_launcher.setarg("duration", "40m")
                record_launcher.start()
                time.sleep(2)

                expe.start()

                return 'true'

            elif "stop_freeplay" in options["action"]:
                rospy.loginfo("Stopping freeplay task")

                blankscreen_publisher.publish(Empty())

                robot_launcher = getlauncher("play")
                robot_launcher.shutdown()

                record_launcher = getlauncher("record")
                record_launcher.shutdown()
                prepare_launcher = getlauncher("prepare_recording")
                prepare_launcher.shutdown()

                return 'true'

            elif "add_marker" in options["action"]:
                mtype = options["type"][0]

                mtime = expe.add_marker(mtype)
                rospy.loginfo("Adding marker at t=%s secs (%s)" % (mtime, mtype))

                return mtime

            elif "add_extra" in options["action"]:
                key = options["name"][0]
                value = options["value"][0]

                expe.add_extra(key, value)
                rospy.loginfo("Adding extra information: %s -> %s" % (key, value))

                return 'true'

            elif "start_prod_quiz" in options["action"]:
                rospy.loginfo("Starting production quiz task")

                # if the cameras are still running (eg, visual tracking as been skipped), stop them now
                launcher = getlauncher("dual_sr300")
                launcher.shutdown()

                prepare_launcher = getlauncher("prepare_recording")
                prepare_launcher.shutdown()
                #######################################################

                prod_quiz_publisher.publish(Empty())
                changequestion("start")

                if(expe.condition == CHILDROBOT):
                    rospy.loginfo("Starting the robot first")
                    robot_launcher = getlauncher("woz")
                    #robot_launcher = getlauncher("nao_behaviours")
                    robotip = options['robot-ip'][0];
                    rospy.loginfo("Setting the robot IP address to %s" % robotip)
                    robot_launcher.setarg("nao_ip", robotip)
                    robot_launcher.setarg("with_robot", True)
                    robot_launcher.setarg("arm_reach", 0.5)

                    ##### WORKAROUND FOR NAOQI MESSING UP WITH THE ENVIRONMENT
                    # in general, we does not want the naoqi SDK to appear in the
                    # LD_LIBRARY_PATH as it contains old libraries. But when launching
                    # the robot, this needs to be added
                    env = dict(os.environ)
                    env['LD_LIBRARY_PATH'] = env['LD_LIBRARY_PATH'] + ":" + env['HOME'] + "/nao/naoqi-sdk-2.1.4.13-linux64/lib"
                    ######

                    robot_launcher.start(env=env)

                prepare_launcher = getlauncher("prepare_recording")
                prepare_launcher.start()
                record_launcher = getlauncher("record")
                record_launcher.setarg("output_file", os.path.join(expe.path, "prod_quiz.bag"))
                record_launcher.setarg("duration", "40m")
                record_launcher.start()
                time.sleep(2)

                expe.start()

                return 'true'

            elif "stop_prod_quiz" in options["action"]:
                rospy.loginfo("Stopping production quiz task")

                blankscreen_publisher.publish(Empty())
                changequestion("clear")

                robot_launcher = getlauncher("woz")
                #robot_launcher = getlauncher("nao_behaviours")
                robot_launcher.shutdown()

                record_launcher = getlauncher("record")
                record_launcher.shutdown()
                prepare_launcher = getlauncher("prepare_recording")
                prepare_launcher.shutdown()

                return 'true'

            elif "quiz_question" in options["action"]:

                rospy.loginfo("Changing the quiz question %s" % options["question"][0])
                prod_quiz_num_pub.publish(changequestion(options["question"][0]))

                return 'true'

            elif "quiz_explain" in options["action"]:
                rospy.loginfo("Give explanation of how to play the quiz")
                pub_quiz_start.publish(Empty())
                return 'true'

            elif "quiz_feedback" in options["action"]:

                if 'feedback' in options:
                    rospy.loginfo("Give %s feedback in quiz " % options["feedback"][0])
                    pub_quiz_result.publish(options["feedback"][0])
                    time.sleep(2)
                    pub_quiz_feedback.publish(options["feedback"][0])

                return 'true'

            elif "quiz_answer" in options["action"]:

                if 'answer' in options:
                    rospy.loginfo("Give %s answer to quiz" % options["answer"][0])
                    pub_quiz_answer.publish(options["answer"][0]+','+str(nb_question))
                    time.sleep(2)
                    pub_quiz_result.publish(options["answer"][0])

                return 'true'

            elif "quiz_encourage" in options["action"]:

                encouragement = options["encourage"][0]
                level, msg = encouragement.split(':')
                rospy.loginfo("Give level %s encouragement: %s" % (level, msg))

                if level == "1":
                    pub_quiz_encourage.publish(Empty())
                if level == "2":
                    pub_quiz_message.publish(msg)
                if level == "3":
                    pub_quiz_message.publish(msg)

                return 'true'

            elif "quiz_uscore" in options["action"]:
                rospy.loginfo("Updating user score to %s" % options["uscore"][0])
                pub_quiz_uscore.publish(options["uscore"][0])

            elif "quiz_ascore" in options["action"]:
                rospy.loginfo("Updating agent score to %s" % options["ascore"][0])
                pub_quiz_ascore.publish(options["ascore"][0])

            elif "child_name" in options["action"]:
                rospy.loginfo("Updating child name to %s" % options["child"][0])
                pub_quiz_childname.publish(options["child"][0])

                if(expe.condition == CHILDROBOT):
                    rospy.loginfo("Updating agent name to Chapman")
                    pub_quiz_agentname.publish("Chapman")

            elif "agent_name" in options["action"]:

                # if(expe.condition == CHILDROBOT):
                #     rospy.loginfo("Updating agent name to Chapman")
                #     pub_quiz_agentname.publish("Chapman")
                #
                # else:
                rospy.loginfo("Updating agent name to %s" % options["agent"][0])
                pub_quiz_agentname.publish(options["agent"][0])


            elif "quiz_switch_turn" in options["action"]:
                rospy.loginfo("Switching players turn to guess")
                msg = random.choice(["How about I have a guess?", "It will be my turn now to try"])
                msg = "none, " + msg
                pub_quiz_message.publish(msg)

            elif "quiz_prompt_language" in options["action"]:
                rospy.loginfo("Prompting the child to use L2 language")
                pub_quiz_message.publish(options["language"][0])

            elif "quiz_question_hint" in options["action"]:
                rospy.loginfo("Provide hints to the child")
                pub_quiz_message.publish(options["hint"][0])

            elif "finalise" in options["action"]:
                rospy.loginfo("Finalising the experiment")
                expe.save_experiment_details()

                for launcher in launchers:
                    launcher.shutdown()
                rospy.loginfo("All launchers stopped!")

                return 'true'



            else:
                rospy.logwarn("record: received unknown action %s" % str(options["action"]))
                return 'false'

    except Exception as e:
        rospy.logerr("Error processing the request! (%s %s)" % (path, str(options)))
        rospy.logerr(traceback.format_exc())

    pingable, unpingable = rosnode.rosnode_ping_all()
    return supervisor_tpl.generate(path=path,
                                   freespace=getfreespace(),
                                   launchers=launchers,
                                   nodes_ok=pingable,
                                   nodes_ko=unpingable)

def app(environ, start_response):

    start_response('200 OK', [('Content-Type', 'text/html')])

    path = environ["PATH_INFO"].decode("utf-8")

    options = urlparse.parse_qs(environ["QUERY_STRING"])
    rospy.logdebug("Incoming request. Path: %s; options passed:\n%s" % (path, str(options)))

    return imap(fixencoding, process(path,options))

if __name__ == '__main__':

    IP="127.0.0.1"
    PORT=8080

    purpleface_subscriber = rospy.Subscriber("/camera_purple/nb_detected_faces", Char, onpurplefacedetected)
    yellowface_subscriber = rospy.Subscriber("/camera_yellow/nb_detected_faces", Char, onyellowfacedetected)
    visual_tracking_ended_subscriber = rospy.Subscriber("/sandtray/signals/visual_tracking_calibration_ended", Empty, onvisualtrackingended)

    rospy.loginfo("Starting the CGI server on %s:%d (you still need a webserver, though!)" % (IP, PORT))

    WSGIServer(app, bindAddress = (IP, PORT)).run()

    for launcher in launchers:
        launcher.shutdown()

    rospy.loginfo("Bye bye.")
